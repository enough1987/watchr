class Upload < ApplicationController
#upload.rb
=begin
 По умолчанию папка для загрузки
 public/uploads
=end
  @@location = 'public/spree/seller'

  def initialize(name, location, debug)
    @name = nil
    @file_name=nil
    @file_content_type=nil #all formats
    @bytes=nil #default lo limit size upload
    @name = name
    @@type=nil #all file extensions type
    @location=nil #default @@location

    debug.nil? ? @debug=nil : @debug = debug

    rails_dir="#{RAILS_ROOT}"
    logger.debug('PWD  '+rails_dir) if @debug
    if location.nil?
      @location =rails_dir+'/'+@@location+'/'
    else
      @location =rails_dir+'/'+location+'/'
    end

    #create directorys structure
    # if it is not exists
    FileUtils.mkdir_p @@location
  end

  def write(new_name)
    @up_file = @name

    logger.debug("Inspect upload file: "+ @up_file.inspect)  if @debug
    logger.debug("ORIGINAL FILE_NAME "+ @up_file.original_filename)  if @debug
    logger.debug("File SIZE: #{@up_file.size}") if @debug
    logger.debug("Content type:  "+  @up_file.content_type)  if @debug
    logger.debug("TO DIR: "+  @@location) if @debug


    #Меняем имя файла если это необходимо
    if new_name.nil?
      @file_name = base_part_of(@up_file.original_filename)
    else
      ext=base_part_of(@up_file.original_filename).split('.')[-1]
      logger.debug("new_name: #{new_name}  type: #{type}  ext: #{ext}") if @debug
#check file content-type

      if @@type.nil? || @@type.include?(ext)
        @file_name ="#{new_name}.#{ext}"
      else
        return false
      end
    end
#check file max-size
     unless @bytes.nil?
       if @up_file.size > @bytes
         return false
       end
     end


    @file_content_type = @up_file.content_type.chomp
    @local_file_name=@location+@file_name

    FileUtils.mkdir_p(@location)
    if @up_file.instance_of?(Tempfile)
      FileUtils.cp(@up_file.local_path, @local_file_name)
    else
      File.open(@local_file_name, "wb") { |f| f.write(@up_file.read) }
    end
    return true
  end

  def allow_format(type)
    #type =(img|doc|arh|all)
    if type=='img'
      @@type=['gif','jpg','jpeg','png']
    elsif type=='doc'
      @@type=['doc','xsl','txt','log','rtf','xml','html','htm','ini','pdf']
    elsif type=='arh'
      @@type=['zip','rar','tar','gz']
    elsif type.nil? ||type=='all'
      @@type=nil
    end
  end

  def set_max_size(bytes)
     unless bytes.nil?
        @bytes=bytes
     else
        @bytes=nil
     end
  end
  #get only file name
  def base_part_of(file_name)
    name = File.basename(file_name)
    name.gsub(/[^\w._-]/, '')
  end

  def file_name
    @file_name
  end

#chek esist file
  def exist?(file)
    file="#{RAILS_ROOT}"+'/public/'+file
    if File.exists?(file)
      return true
    else
      return false
    end
  end

  def destroy(file)
    remove_file="#{RAILS_ROOT}"+'/public/'+file
    logger.info("Inspect drop file: #{remove_file.inspect}")  if @debug

    if File.exists?(remove_file)
      begin
        File.delete(remove_file)
      rescue SystemCallError => e
        flash[:notice]= "#{e.message}"
        return false
      end
    else
      return true
    end

  end
end
